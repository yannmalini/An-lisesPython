{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Cópia de Aula06.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/yannmalini/Python/blob/main/Otimiza%C3%A7%C3%A3o%20Linear%20com%20Python\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gFK-kpUrL5af"
      },
      "source": [
        "Slides da aula [aqui](https://drive.google.com/file/d/1Xnu_xVjpblr7Ljbb8DEqUrOR-WdqGBwW/view?usp=sharing)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fNWl3b7jANDe"
      },
      "source": [
        "# Otimização Linear (Programação Linear)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wHlZ20W-Lvls"
      },
      "source": [
        "A otimização linear (ou programação linear) é um grupo de algoritmos inseridos no contexto da Pesquisa Operacional.\n",
        "\n",
        "Este grupo de algoritmos tem por objetivo encontrar **a melhor solução** dentro de um universo de soluções possíveis.\n",
        "\n",
        "Este universo de soluções possíveis é restringido (limitado) pelas suas condições, ou **restrições**.\n",
        "\n",
        "Os problemas de otimização linear então focam em **maximizar** algum resultado operacional (como lucro ou receita), ou então, em **minimizar** algum resutado operacional (como tempo de produção ou custos)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eaGEmhpcNm3X"
      },
      "source": [
        "Nosso problema de hoje é: Uma empresa de pesca que pratica 2 pescarias diferentes (pesca de 2 espécies), e precisa decidir quantos barcos vão fazer a pescaria A e quantos barcos vão fazer a pescaria B.\n",
        "\n",
        "Cada barco que vai pescar a espécie A volta com 20 mil de lucro, precisa de 6 tripulantes e demora 40 horas para concluir a atividade.\n",
        "\n",
        "Cada barco que vai pescar a espécie B volta com 10 mil de lucro, também precisa de 6 tripulantes e demora 10 horas para concluir.\n",
        "\n",
        "Vale lembrar que os recursos disponíveis são limitados, esta empresa então consegue arcar com somente 1000 horas de atividade por semana e dispõe de 240 tripulantes para embarque. Nesta situação, a empresa deve escolher a melhor maneira para alocar seus recursos, de modo que lhe traga o melhor resultado operacional, neste caso, um lucro máximo.\n",
        "\n",
        "A pergunta aqui então é: Quantos barcos eu devo enviar para cada pescaria, de modo a obter o maior lucro possível?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MnZYSTiYPgHB"
      },
      "source": [
        "Podemos resolver este problema de forma matricial, ou de forma gráfica.\n",
        "\n",
        "Veja a resolução gráfica [aqui](https://drive.google.com/file/d/1IvSjYRT3NNTZH1dYWJCXRkPKgaX5PvRs/view?usp=sharing)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aeM072XvPqai"
      },
      "source": [
        "Abaixo vamos reconstruir a solução gráfica usando Matplotlib."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hUl2-taH_Kgi"
      },
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "0t6DWMvlaS28",
        "outputId": "d3b4ebc1-a854-4fcd-a505-ff88f682a785"
      },
      "source": [
        "fig, ax = plt.subplots()\n",
        "\n",
        "ax.scatter([0,40],[40,0])\n",
        "ax.scatter([0,25],[100,0])\n",
        "\n",
        "x1 = np.linspace(0,40)\n",
        "y1 = np.linspace(40,0)\n",
        "ax.plot(x1,y1)\n",
        "\n",
        "x2 = np.linspace(0,25)\n",
        "y2 = np.linspace(100,0)\n",
        "ax.plot(x2,y2)\n",
        "\n",
        "ax.fill_between(x1,y1,0, color='blue')\n",
        "ax.fill_between(x2,y2,0, color='orange', alpha=0.5)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MoJYAOIlP0r1"
      },
      "source": [
        "# Resolvendo uma otimização linear"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cl8Wmsq0P5uE"
      },
      "source": [
        "No Python existem várias bibliotecas para otimização linear. Uma das mais conhecidas e mais simples de usar é a [PuLP](https://coin-or.github.io/pulp/).\n",
        "\n",
        "Vamos começar instalando a biblioteca."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bP3argOEcnB1",
        "outputId": "4b88993c-c9c0-4e4a-e9bd-01571ed8ef11"
      },
      "source": [
        "!pip install pulp"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting pulp\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/14/c4/0eec14a0123209c261de6ff154ef3be5cad3fd557c084f468356662e0585/PuLP-2.4-py3-none-any.whl (40.6MB)\n",
            "\u001b[K     |████████████████████████████████| 40.6MB 1.2MB/s \n",
            "\u001b[?25hCollecting amply>=0.1.2\n",
            "  Downloading https://files.pythonhosted.org/packages/f3/c5/dfa09dd2595a2ab2ab4e6fa7bebef9565812722e1980d04b0edce5032066/amply-0.1.4-py3-none-any.whl\n",
            "Requirement already satisfied: pyparsing in /usr/local/lib/python3.7/dist-packages (from amply>=0.1.2->pulp) (2.4.7)\n",
            "Requirement already satisfied: docutils>=0.3 in /usr/local/lib/python3.7/dist-packages (from amply>=0.1.2->pulp) (0.17)\n",
            "Installing collected packages: amply, pulp\n",
            "Successfully installed amply-0.1.4 pulp-2.4\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CitGITD-QNeJ"
      },
      "source": [
        "Muito bem, agora podemos importar a biblioteca."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3v9_qJYccvWp"
      },
      "source": [
        "from pulp import *"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5HrdSAYLSmip"
      },
      "source": [
        "## Definindo o problema"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yeOMA-XNQQzz"
      },
      "source": [
        "Começamos definindo qual o tipo do nosso problema, que neste caso é de Maximização."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NLH6kkZQc_j-",
        "outputId": "845fa628-e9f5-4987-f404-9ce5a8facc2e"
      },
      "source": [
        "prob = LpProblem('Lucro das pescarias', LpMaximize)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/pulp/pulp.py:1199: UserWarning: Spaces are not permitted in the name. Converted to '_'\n",
            "  warnings.warn(\"Spaces are not permitted in the name. Converted to '_'\")\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5i1kSG1XQfXs"
      },
      "source": [
        "Na sequência definimos quais variáveis fazem parte da nossa função objetivo ($ L = 20A + 10B $). Neste caso, são as variáveis: Número de barcos para a pescaria A, e número de barcos para a pescaria B. Logo, $ BA $ e $ BB $.\n",
        "\n",
        "Definimos que estas variáveis são do tipo *integer* pois não podemos ter frações de um barco (Para variáveis fracionárias use a categoria *continuous*)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FO_de2kKdQu-"
      },
      "source": [
        "# integer para inteiros e continuous para reais\n",
        "BA = LpVariable('Barcos da pescaria A', cat='integer')\n",
        "BB = LpVariable('Barcos da pescaria B', cat='integer')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OTuOfl_VR0qb"
      },
      "source": [
        "Muito bem, agora vamos definir a nossa função objetivo, que representa o lucro da empresa.\n",
        "\n",
        "$$ L = 20A + 10B $$"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Kt4gJ5rXSHKr"
      },
      "source": [
        "NOTA: Veja que no PuLP, para adicionar informações ao nosso problema de otimização, nós adicionamos os termos à nossa variável de problema `prob` usando o operador de incremento `+=`."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_UVgXPdUd7kp"
      },
      "source": [
        "# função objetivo\n",
        "prob += 20*BA + 10*BB, 'Lucro das duas pescarias'"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HosjbaK1SXgG"
      },
      "source": [
        "Agora devemos adicionar as restrições do nosso problema (nossas inequações)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5CvavZ-wech8"
      },
      "source": [
        "# RESTRIÇÕES = CONDIÇÕES\n",
        "prob += 40*BA + 10*BB <= 1000, 'máximo de horas disponíveis'\n",
        "prob += 6*BA + 6*BB <= 240, 'máximo de tripulantes disponíveis'\n",
        "prob += BA >= 0, 'mínimo de barcos para pescaria A'\n",
        "prob += BB >= 0, 'mínimo de barcos para pescaria B'"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FbQ7M9UCSq7v"
      },
      "source": [
        "Agora que já definimos todos os termos do nosso problema (Função Objetivo, Variáveis e Restrições), podemos usar um algoritmo de solver para encontrar a melhor solução possível."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fvuUhPgGSoko"
      },
      "source": [
        "## Resolvendo o problema"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VkLcXGgvS6I8"
      },
      "source": [
        "Para resolver o problema linear chamamos o método `.solve()`\n",
        "\n",
        "Os princiais códigos de solução são:\n",
        "*    **1** foi encontrada uma solução ótima\n",
        "*    **-1** solução inviável (a solução viola alguma restrição)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cm0dhAsrgLgE",
        "outputId": "a1de3834-3822-4cee-b9ca-72e6c3f2c0a4"
      },
      "source": [
        "prob.solve()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "-1"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 90
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "m1wtGGetTv7U"
      },
      "source": [
        "Vamos organizar este resultado..."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cWGTgS_Cgp85",
        "outputId": "e2dcb1aa-49b1-4452-a002-fd30706b30a9"
      },
      "source": [
        "resultado = LpStatus[prob.status]\n",
        "print('Resultado', resultado)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Resultado Infeasible\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YQlaITFbTyOp"
      },
      "source": [
        "Muito bem, agora vamos ver qual foi o valor da função obetivo (Lucro) na solução ótima."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S5YYhdIvg-BY",
        "outputId": "264834f7-16fc-4bf0-f283-f98349a3094a"
      },
      "source": [
        "lucro = value(prob.objective)\n",
        "print('Lucro final de', lucro)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Lucro final de 333.333334\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Qgpk9DDzULph"
      },
      "source": [
        "Para alcançar este lucro, quais os valores das variáveis da função objetivo? Ou seja, quantos barcos devem fazer a pescaria A e a pescaria B?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jyJlqhHghaRh",
        "outputId": "aebce8a1-11ec-48bd-a030-be635cadbdaa"
      },
      "source": [
        "for v in prob.variables():\n",
        "  print(v.name, '=', v.varValue)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Barcos_da_pescaria_A = 1.6666667\n",
            "Barcos_da_pescaria_B = 15.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "t_qaot7wUq1a"
      },
      "source": [
        "Finalizada a resolução do nosso problema, lembre-se: O verdadeiro valor da otimização linear é o poder de criar hipóteses de negócios para tomar decisões estratégicas, baseadas no nosso modelo linear construído.\n",
        "\n",
        "Hipóteses como E SE a empresa tivesse 2000 horas disponíveis, qual seria o lucro possível? E SE a empresa tivesse mais tripulantes, qual seria o lucro? E SE a empresa quisesse atingir um lucro de 2500 mil, quantos barcos seriam necessários, para cada pescaria?\n",
        "\n",
        "E assim, por diante. A criatividade aqui é ponto chave, e quanto mais você conhece daquele negócio/atividade, melhor vai ficar o seu modelo linear e melhores serão suas hipóteses, extraindo assim um maior valor desta ferramenta."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yzhYme8rXN7x"
      },
      "source": [
        "# Exemplo de trabalho acadêmico"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "opdMrTRPWxjO"
      },
      "source": [
        "Deixo o link para uma tese de doutorado sobre o assunto [aqui](https://drive.google.com/file/d/1xwQKjs4Kxh4i7f1bBtAf5Ps8dX0SaUdI/view?usp=sharing)."
      ]
    }
  ]
}