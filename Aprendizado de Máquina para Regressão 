{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Aula_11.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyNRcCB29UJPT9YaM/rRAhsA",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/yannmalini/Python/blob/main/Aprendizado%20de%20M%C3%A1quina%20para%20Regress%C3%A3o%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gaAV29uHhxE-"
      },
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from pathlib import Path"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1KEatJOQh_cd"
      },
      "source": [
        "arquivo = Path().cwd().joinpath('Fish.csv')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mO024ui1iF3l"
      },
      "source": [
        "dados = pd.read_csv(str(arquivo))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 205
        },
        "id": "RQ1OX2L9iLPS",
        "outputId": "f821c947-c0a8-41a7-d724-2a72d65016b5"
      },
      "source": [
        "dados.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Species</th>\n",
              "      <th>Weight</th>\n",
              "      <th>Length1</th>\n",
              "      <th>Length2</th>\n",
              "      <th>Length3</th>\n",
              "      <th>Height</th>\n",
              "      <th>Width</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Bream</td>\n",
              "      <td>242.0</td>\n",
              "      <td>23.2</td>\n",
              "      <td>25.4</td>\n",
              "      <td>30.0</td>\n",
              "      <td>11.5200</td>\n",
              "      <td>4.0200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Bream</td>\n",
              "      <td>290.0</td>\n",
              "      <td>24.0</td>\n",
              "      <td>26.3</td>\n",
              "      <td>31.2</td>\n",
              "      <td>12.4800</td>\n",
              "      <td>4.3056</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Bream</td>\n",
              "      <td>340.0</td>\n",
              "      <td>23.9</td>\n",
              "      <td>26.5</td>\n",
              "      <td>31.1</td>\n",
              "      <td>12.3778</td>\n",
              "      <td>4.6961</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Bream</td>\n",
              "      <td>363.0</td>\n",
              "      <td>26.3</td>\n",
              "      <td>29.0</td>\n",
              "      <td>33.5</td>\n",
              "      <td>12.7300</td>\n",
              "      <td>4.4555</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Bream</td>\n",
              "      <td>430.0</td>\n",
              "      <td>26.5</td>\n",
              "      <td>29.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>12.4440</td>\n",
              "      <td>5.1340</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "  Species  Weight  Length1  Length2  Length3   Height   Width\n",
              "0   Bream   242.0     23.2     25.4     30.0  11.5200  4.0200\n",
              "1   Bream   290.0     24.0     26.3     31.2  12.4800  4.3056\n",
              "2   Bream   340.0     23.9     26.5     31.1  12.3778  4.6961\n",
              "3   Bream   363.0     26.3     29.0     33.5  12.7300  4.4555\n",
              "4   Bream   430.0     26.5     29.0     34.0  12.4440  5.1340"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EshuvwlFiMjo"
      },
      "source": [
        "dados.rename(columns={'Length2':'Total Length',\n",
        "                   'Length1':'Vertical Length',\n",
        "                   'Length3':'Diagonal Length'},inplace=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 205
        },
        "id": "denyyyPvicrU",
        "outputId": "02549c17-c061-499b-a2a7-14ac93008db3"
      },
      "source": [
        "dados.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Species</th>\n",
              "      <th>Weight</th>\n",
              "      <th>Vertical Length</th>\n",
              "      <th>Total Length</th>\n",
              "      <th>Diagonal Length</th>\n",
              "      <th>Height</th>\n",
              "      <th>Width</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Bream</td>\n",
              "      <td>242.0</td>\n",
              "      <td>23.2</td>\n",
              "      <td>25.4</td>\n",
              "      <td>30.0</td>\n",
              "      <td>11.5200</td>\n",
              "      <td>4.0200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Bream</td>\n",
              "      <td>290.0</td>\n",
              "      <td>24.0</td>\n",
              "      <td>26.3</td>\n",
              "      <td>31.2</td>\n",
              "      <td>12.4800</td>\n",
              "      <td>4.3056</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Bream</td>\n",
              "      <td>340.0</td>\n",
              "      <td>23.9</td>\n",
              "      <td>26.5</td>\n",
              "      <td>31.1</td>\n",
              "      <td>12.3778</td>\n",
              "      <td>4.6961</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Bream</td>\n",
              "      <td>363.0</td>\n",
              "      <td>26.3</td>\n",
              "      <td>29.0</td>\n",
              "      <td>33.5</td>\n",
              "      <td>12.7300</td>\n",
              "      <td>4.4555</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Bream</td>\n",
              "      <td>430.0</td>\n",
              "      <td>26.5</td>\n",
              "      <td>29.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>12.4440</td>\n",
              "      <td>5.1340</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "  Species  Weight  Vertical Length  ...  Diagonal Length   Height   Width\n",
              "0   Bream   242.0             23.2  ...             30.0  11.5200  4.0200\n",
              "1   Bream   290.0             24.0  ...             31.2  12.4800  4.3056\n",
              "2   Bream   340.0             23.9  ...             31.1  12.3778  4.6961\n",
              "3   Bream   363.0             26.3  ...             33.5  12.7300  4.4555\n",
              "4   Bream   430.0             26.5  ...             34.0  12.4440  5.1340\n",
              "\n",
              "[5 rows x 7 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "m3_Q7LZ5ieKF"
      },
      "source": [
        "dados.drop(columns=['Vertical Length', 'Diagonal Length'], inplace=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 205
        },
        "id": "eynKgYPrjHuX",
        "outputId": "8a38ff93-adfd-4bb7-da3f-68a7f8f6a940"
      },
      "source": [
        "dados.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Species</th>\n",
              "      <th>Weight</th>\n",
              "      <th>Total Length</th>\n",
              "      <th>Height</th>\n",
              "      <th>Width</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Bream</td>\n",
              "      <td>242.0</td>\n",
              "      <td>25.4</td>\n",
              "      <td>11.5200</td>\n",
              "      <td>4.0200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Bream</td>\n",
              "      <td>290.0</td>\n",
              "      <td>26.3</td>\n",
              "      <td>12.4800</td>\n",
              "      <td>4.3056</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Bream</td>\n",
              "      <td>340.0</td>\n",
              "      <td>26.5</td>\n",
              "      <td>12.3778</td>\n",
              "      <td>4.6961</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Bream</td>\n",
              "      <td>363.0</td>\n",
              "      <td>29.0</td>\n",
              "      <td>12.7300</td>\n",
              "      <td>4.4555</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Bream</td>\n",
              "      <td>430.0</td>\n",
              "      <td>29.0</td>\n",
              "      <td>12.4440</td>\n",
              "      <td>5.1340</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "  Species  Weight  Total Length   Height   Width\n",
              "0   Bream   242.0          25.4  11.5200  4.0200\n",
              "1   Bream   290.0          26.3  12.4800  4.3056\n",
              "2   Bream   340.0          26.5  12.3778  4.6961\n",
              "3   Bream   363.0          29.0  12.7300  4.4555\n",
              "4   Bream   430.0          29.0  12.4440  5.1340"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "krGMnnyNjI4U"
      },
      "source": [
        "dados.drop(columns=['Species'], inplace=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 205
        },
        "id": "5SfqC_H_jUuT",
        "outputId": "aa572f9d-8256-4d60-8304-7fafa344d2af"
      },
      "source": [
        "dados.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Weight</th>\n",
              "      <th>Total Length</th>\n",
              "      <th>Height</th>\n",
              "      <th>Width</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>242.0</td>\n",
              "      <td>25.4</td>\n",
              "      <td>11.5200</td>\n",
              "      <td>4.0200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>290.0</td>\n",
              "      <td>26.3</td>\n",
              "      <td>12.4800</td>\n",
              "      <td>4.3056</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>340.0</td>\n",
              "      <td>26.5</td>\n",
              "      <td>12.3778</td>\n",
              "      <td>4.6961</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>363.0</td>\n",
              "      <td>29.0</td>\n",
              "      <td>12.7300</td>\n",
              "      <td>4.4555</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>430.0</td>\n",
              "      <td>29.0</td>\n",
              "      <td>12.4440</td>\n",
              "      <td>5.1340</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Weight  Total Length   Height   Width\n",
              "0   242.0          25.4  11.5200  4.0200\n",
              "1   290.0          26.3  12.4800  4.3056\n",
              "2   340.0          26.5  12.3778  4.6961\n",
              "3   363.0          29.0  12.7300  4.4555\n",
              "4   430.0          29.0  12.4440  5.1340"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "veVB4bpejWlh",
        "outputId": "95dc77ec-4e8b-4439-bbfe-fcbda84275f5"
      },
      "source": [
        "fig, box = dados.plot.box(return_type='both') "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E3p7IA6IkLGe",
        "outputId": "21321b3b-e8c5-4753-8ead-b96380adff4d"
      },
      "source": [
        "box['fliers']"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7fd9505a0510>,\n",
              " <matplotlib.lines.Line2D at 0x7fd9505b0b10>,\n",
              " <matplotlib.lines.Line2D at 0x7fd9505cc0d0>,\n",
              " <matplotlib.lines.Line2D at 0x7fd95055a610>]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hdOe3lNmkSnE",
        "outputId": "9040f63c-eda1-4bb9-8587-fb2c867251b7"
      },
      "source": [
        "box['fliers'][0].get_ydata()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1600., 1550., 1650.])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N-SIzHRSkh_b",
        "outputId": "897ff58b-7751-4193-e65a-7ccb6bca86ba"
      },
      "source": [
        "box['fliers'][1].get_ydata()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([60. , 60. , 63.4])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NW8j1HI3ksDF",
        "outputId": "62ac0d08-8866-4f92-91bf-aec0cce1f455"
      },
      "source": [
        "box['fliers'][2].get_ydata()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([], dtype=float64)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DXuyl-OCktYB",
        "outputId": "c6b2d539-e47c-47b0-c1f7-5bd4875446fa"
      },
      "source": [
        "box['fliers'][3].get_ydata()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([], dtype=float64)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "id": "owTe-BcrkuYQ",
        "outputId": "a212b69c-8d58-4ef9-eff2-95e866da7421"
      },
      "source": [
        "dados.loc[dados['Weight'] == 1600,:]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Weight</th>\n",
              "      <th>Total Length</th>\n",
              "      <th>Height</th>\n",
              "      <th>Width</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>142</th>\n",
              "      <td>1600.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>9.6</td>\n",
              "      <td>6.144</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "     Weight  Total Length  Height  Width\n",
              "142  1600.0          60.0     9.6  6.144"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "id": "r78ETfYhk0e3",
        "outputId": "73e10e50-067a-4093-f898-74c1205dee93"
      },
      "source": [
        "dados.loc[dados['Weight'] == 1550,:]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Weight</th>\n",
              "      <th>Total Length</th>\n",
              "      <th>Height</th>\n",
              "      <th>Width</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>143</th>\n",
              "      <td>1550.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>9.6</td>\n",
              "      <td>6.144</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "     Weight  Total Length  Height  Width\n",
              "143  1550.0          60.0     9.6  6.144"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "id": "5O8bvBK3lcJV",
        "outputId": "d7c683ef-c815-4b52-ae3b-2a480ef8ce88"
      },
      "source": [
        "dados.loc[dados['Weight'] == 1650,:]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Weight</th>\n",
              "      <th>Total Length</th>\n",
              "      <th>Height</th>\n",
              "      <th>Width</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>144</th>\n",
              "      <td>1650.0</td>\n",
              "      <td>63.4</td>\n",
              "      <td>10.812</td>\n",
              "      <td>7.48</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "     Weight  Total Length  Height  Width\n",
              "144  1650.0          63.4  10.812   7.48"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GoWeD-0_lfJC"
      },
      "source": [
        "dados.drop([142, 143, 144], inplace=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-SdgCGzLlrXn",
        "outputId": "e04b831b-8367-474b-9f29-4fb2c9aca62f"
      },
      "source": [
        "dados.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(155, 4)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vnjSEzFvlwsl"
      },
      "source": [
        "X = dados.iloc[:,[1,2,3]]\n",
        "y = dados.iloc[:,[0]]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "id": "ZY_mIhXqmOnO",
        "outputId": "efa9dbf8-e4d5-41ad-d35c-18c17bc7adcc"
      },
      "source": [
        "dados.loc[dados['Weight']== 0,:]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Weight</th>\n",
              "      <th>Total Length</th>\n",
              "      <th>Height</th>\n",
              "      <th>Width</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>0.0</td>\n",
              "      <td>20.5</td>\n",
              "      <td>6.4752</td>\n",
              "      <td>3.3516</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    Weight  Total Length  Height   Width\n",
              "40     0.0          20.5  6.4752  3.3516"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aPVN8eCEm2SC"
      },
      "source": [
        "dados.drop([40], inplace=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f5hy29qbmZnZ"
      },
      "source": [
        "#Padronização dos dados"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "L3IILp1KmYkQ"
      },
      "source": [
        "from sklearn.preprocessing import MinMaxScaler"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Wx7L6i9PnH9V",
        "outputId": "f77f5fb0-b903-4485-a410-988418bc9149"
      },
      "source": [
        "scaler = MinMaxScaler()\n",
        "scaler.fit(X)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "MinMaxScaler(copy=True, feature_range=(0, 1))"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fwFPVGSPnmlJ"
      },
      "source": [
        "X_scaled = scaler.transform(X)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8NmgJGifqw5w",
        "outputId": "9e5eb0b5-97ce-46ef-c5d8-0f10597ca88c"
      },
      "source": [
        "X_scaled"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[3.57142857e-01, 5.68334049e-01, 4.18978349e-01],\n",
              "       [3.76050420e-01, 6.24055350e-01, 4.59235453e-01],\n",
              "       [3.80252101e-01, 6.18123353e-01, 5.14278868e-01],\n",
              "       [4.32773109e-01, 6.38566105e-01, 4.80364795e-01],\n",
              "       [4.32773109e-01, 6.21965801e-01, 5.76003608e-01],\n",
              "       [4.47478992e-01, 6.89202837e-01, 5.46882048e-01],\n",
              "       [4.47478992e-01, 7.22699465e-01, 5.96371786e-01],\n",
              "       [4.53781513e-01, 6.35083524e-01, 5.13419035e-01],\n",
              "       [4.53781513e-01, 7.12565153e-01, 5.35098106e-01],\n",
              "       [4.68487395e-01, 7.25433291e-01, 5.51392648e-01],\n",
              "       [4.74789916e-01, 7.27534449e-01, 5.71803112e-01],\n",
              "       [4.74789916e-01, 7.33837921e-01, 5.30982183e-01],\n",
              "       [4.85294118e-01, 6.98303983e-01, 4.68031123e-01],\n",
              "       [4.95798319e-01, 7.07225195e-01, 5.67377086e-01],\n",
              "       [4.95798319e-01, 7.67677002e-01, 5.81190798e-01],\n",
              "       [4.95798319e-01, 7.95746607e-01, 6.38870095e-01],\n",
              "       [5.16806723e-01, 7.62220958e-01, 5.97344384e-01],\n",
              "       [5.16806723e-01, 7.66725097e-01, 5.84954330e-01],\n",
              "       [5.27310924e-01, 8.07064997e-01, 5.75975417e-01],\n",
              "       [5.27310924e-01, 7.39781526e-01, 6.59675237e-01],\n",
              "       [5.37815126e-01, 7.77782292e-01, 6.37390054e-01],\n",
              "       [5.37815126e-01, 8.27995310e-01, 6.09325665e-01],\n",
              "       [5.48319328e-01, 8.00662851e-01, 5.96597316e-01],\n",
              "       [5.58823529e-01, 7.97522724e-01, 7.16480604e-01],\n",
              "       [5.58823529e-01, 8.42326132e-01, 6.40138701e-01],\n",
              "       [5.58823529e-01, 8.49262273e-01, 7.05570591e-01],\n",
              "       [5.58823529e-01, 8.49366751e-01, 7.10757781e-01],\n",
              "       [5.79831933e-01, 8.58375028e-01, 6.77139716e-01],\n",
              "       [5.79831933e-01, 8.80001857e-01, 7.26037438e-01],\n",
              "       [6.00840336e-01, 1.00000000e+00, 7.83068336e-01],\n",
              "       [6.32352941e-01, 9.46594616e-01, 7.41246617e-01],\n",
              "       [6.32352941e-01, 9.49328442e-01, 7.39230943e-01],\n",
              "       [6.53361345e-01, 9.88228875e-01, 8.03746617e-01],\n",
              "       [6.84873950e-01, 9.81333364e-01, 8.03408322e-01],\n",
              "       [6.84873950e-01, 9.22599631e-01, 7.50296008e-01],\n",
              "       [1.19747899e-01, 1.40394460e-01, 1.72023004e-01],\n",
              "       [2.05882353e-01, 2.07207782e-01, 2.50070478e-01],\n",
              "       [2.18487395e-01, 2.23303112e-01, 2.61727560e-01],\n",
              "       [2.39495798e-01, 2.25682876e-01, 2.99813938e-01],\n",
              "       [2.43697479e-01, 2.60473863e-01, 3.56140054e-01],\n",
              "       [2.60504202e-01, 2.57670385e-01, 3.30979364e-01],\n",
              "       [2.64705882e-01, 2.54588301e-01, 3.16686401e-01],\n",
              "       [2.85714286e-01, 2.36589160e-01, 3.81540370e-01],\n",
              "       [2.85714286e-01, 2.84730042e-01, 3.52418809e-01],\n",
              "       [2.96218487e-01, 3.07918229e-01, 3.90829387e-01],\n",
              "       [2.96218487e-01, 2.79860232e-01, 3.21013757e-01],\n",
              "       [2.96218487e-01, 2.71153779e-01, 3.87967975e-01],\n",
              "       [3.27731092e-01, 3.36997783e-01, 3.92929635e-01],\n",
              "       [3.15126050e-01, 3.01063348e-01, 3.64174560e-01],\n",
              "       [3.17226891e-01, 3.29011063e-01, 4.34088859e-01],\n",
              "       [3.52941176e-01, 3.11006118e-01, 4.02909337e-01],\n",
              "       [3.69747899e-01, 4.14914735e-01, 4.86186288e-01],\n",
              "       [3.90756303e-01, 3.96991050e-01, 5.25202977e-01],\n",
              "       [4.89495798e-01, 4.50216500e-01, 6.07154939e-01],\n",
              "       [3.69747899e-01, 3.86102179e-01, 4.51059991e-01],\n",
              "       [3.80252101e-01, 3.72462069e-01, 4.51186852e-01],\n",
              "       [4.11764706e-01, 4.09180084e-01, 5.12235002e-01],\n",
              "       [4.74789916e-01, 5.23292665e-01, 7.77289129e-01],\n",
              "       [5.88235294e-01, 5.82334026e-01, 7.78924222e-01],\n",
              "       [6.63865546e-01, 6.16741929e-01, 7.72073748e-01],\n",
              "       [1.32352941e-01, 2.97128031e-01, 1.80268945e-01],\n",
              "       [1.49159664e-01, 2.81439003e-01, 1.78535183e-01],\n",
              "       [1.95378151e-01, 3.29498624e-01, 2.29110284e-01],\n",
              "       [2.22689076e-01, 3.86787087e-01, 2.63658660e-01],\n",
              "       [2.43697479e-01, 4.15843423e-01, 3.16474966e-01],\n",
              "       [2.58403361e-01, 3.95226542e-01, 3.16700496e-01],\n",
              "       [2.58403361e-01, 4.45050672e-01, 3.33051421e-01],\n",
              "       [2.75210084e-01, 4.64808516e-01, 2.97347203e-01],\n",
              "       [3.06722689e-01, 5.00179933e-01, 3.68741543e-01],\n",
              "       [3.48739496e-01, 5.43259464e-01, 4.36456924e-01],\n",
              "       [3.69747899e-01, 5.59511510e-01, 4.49142986e-01],\n",
              "       [0.00000000e+00, 2.22653030e-02, 5.08006315e-02],\n",
              "       [1.11344538e-01, 1.04454221e-01, 1.34133965e-01],\n",
              "       [1.38655462e-01, 1.21634956e-01, 1.95139829e-01],\n",
              "       [1.63865546e-01, 1.66235214e-01, 2.23274696e-01],\n",
              "       [1.89075630e-01, 1.65979824e-01, 2.66957037e-01],\n",
              "       [2.01680672e-01, 2.02802317e-01, 3.20534506e-01],\n",
              "       [2.16386555e-01, 2.01455719e-01, 2.92596978e-01],\n",
              "       [2.22689076e-01, 2.26797302e-01, 2.82278981e-01],\n",
              "       [2.35294118e-01, 1.97880269e-01, 2.80390167e-01],\n",
              "       [2.43697479e-01, 1.94653077e-01, 2.43064953e-01],\n",
              "       [2.64705882e-01, 2.30088341e-01, 3.53433694e-01],\n",
              "       [2.64705882e-01, 2.43148021e-01, 3.18547023e-01],\n",
              "       [2.64705882e-01, 2.30088341e-01, 3.69291272e-01],\n",
              "       [2.71008403e-01, 2.70225091e-01, 3.50473613e-01],\n",
              "       [2.85714286e-01, 2.54321303e-01, 3.32642648e-01],\n",
              "       [2.85714286e-01, 2.27041083e-01, 3.49205007e-01],\n",
              "       [2.85714286e-01, 2.54321303e-01, 3.49205007e-01],\n",
              "       [2.85714286e-01, 2.40681193e-01, 3.49205007e-01],\n",
              "       [2.85714286e-01, 2.20221028e-01, 4.15454443e-01],\n",
              "       [2.96218487e-01, 2.39578375e-01, 3.63159675e-01],\n",
              "       [2.96218487e-01, 2.93906644e-01, 3.63159675e-01],\n",
              "       [3.00420168e-01, 2.45220157e-01, 3.64005413e-01],\n",
              "       [3.06722689e-01, 2.02575949e-01, 3.63441588e-01],\n",
              "       [3.17226891e-01, 2.63898401e-01, 3.77396256e-01],\n",
              "       [3.27731092e-01, 3.22986197e-01, 3.77114344e-01],\n",
              "       [3.27731092e-01, 2.69702704e-01, 3.91491881e-01],\n",
              "       [3.40336134e-01, 2.90505323e-01, 4.39529770e-01],\n",
              "       [3.48739496e-01, 2.73446479e-01, 3.71546572e-01],\n",
              "       [3.61344538e-01, 2.80498706e-01, 4.49847767e-01],\n",
              "       [3.80252101e-01, 3.15730820e-01, 4.36456924e-01],\n",
              "       [3.97058824e-01, 3.82770510e-01, 5.76468764e-01],\n",
              "       [4.01260504e-01, 3.15684385e-01, 4.63379567e-01],\n",
              "       [4.01260504e-01, 3.08974612e-01, 4.63379567e-01],\n",
              "       [4.01260504e-01, 3.22394159e-01, 4.95968651e-01],\n",
              "       [4.11764706e-01, 3.53598087e-01, 4.44942490e-01],\n",
              "       [4.26470588e-01, 3.39946368e-01, 5.05722824e-01],\n",
              "       [4.53781513e-01, 3.41710876e-01, 5.24921065e-01],\n",
              "       [5.12605042e-01, 4.81849947e-01, 7.00608931e-01],\n",
              "       [5.48319328e-01, 4.94996692e-01, 7.52692264e-01],\n",
              "       [5.58823529e-01, 5.66499890e-01, 9.51186852e-01],\n",
              "       [5.90336134e-01, 5.31244558e-01, 8.19857916e-01],\n",
              "       [5.79831933e-01, 5.15462661e-01, 8.02492106e-01],\n",
              "       [6.00840336e-01, 5.28574579e-01, 7.35368742e-01],\n",
              "       [6.00840336e-01, 5.13291852e-01, 7.49746279e-01],\n",
              "       [6.42857143e-01, 5.46080355e-01, 9.08575778e-01],\n",
              "       [6.42857143e-01, 5.46080355e-01, 6.98494587e-01],\n",
              "       [6.42857143e-01, 6.21228655e-01, 8.88559991e-01],\n",
              "       [6.63865546e-01, 5.92050428e-01, 8.54025710e-01],\n",
              "       [6.63865546e-01, 5.80523084e-01, 8.70743121e-01],\n",
              "       [6.63865546e-01, 6.18297482e-01, 9.04206134e-01],\n",
              "       [6.63865546e-01, 5.45987486e-01, 7.86874154e-01],\n",
              "       [7.05882353e-01, 6.42640725e-01, 8.20478124e-01],\n",
              "       [7.26890756e-01, 5.92294208e-01, 8.78101037e-01],\n",
              "       [7.26890756e-01, 6.25941748e-01, 8.97736243e-01],\n",
              "       [7.37394958e-01, 6.31252684e-01, 1.00000000e+00],\n",
              "       [7.47899160e-01, 6.24566128e-01, 9.23009698e-01],\n",
              "       [5.02100840e-01, 2.22861985e-01, 3.28146143e-01],\n",
              "       [5.37815126e-01, 2.30976400e-01, 4.38430311e-01],\n",
              "       [5.58823529e-01, 2.44245034e-01, 4.70342806e-01],\n",
              "       [6.07142857e-01, 2.64676178e-01, 4.18950158e-01],\n",
              "       [6.21848739e-01, 3.22812068e-01, 4.97420501e-01],\n",
              "       [6.32352941e-01, 2.70921607e-01, 4.12917230e-01],\n",
              "       [7.16386555e-01, 3.22231638e-01, 4.61617614e-01],\n",
              "       [7.16386555e-01, 2.95822063e-01, 4.80858142e-01],\n",
              "       [7.26890756e-01, 3.51601407e-01, 5.75383401e-01],\n",
              "       [7.68907563e-01, 3.03657871e-01, 5.42456022e-01],\n",
              "       [7.89915966e-01, 3.51949665e-01, 5.38791159e-01],\n",
              "       [8.31932773e-01, 3.45448847e-01, 6.10115020e-01],\n",
              "       [9.09663866e-01, 4.17782060e-01, 7.22203428e-01],\n",
              "       [1.00000000e+00, 5.19943582e-01, 8.36899526e-01],\n",
              "       [2.94117647e-02, 6.03647423e-04, 0.00000000e+00],\n",
              "       [4.41176471e-02, 1.41392800e-02, 1.58434822e-02],\n",
              "       [4.62184874e-02, 0.00000000e+00, 1.42083897e-02],\n",
              "       [5.46218487e-02, 2.71409168e-02, 4.68538566e-02],\n",
              "       [5.88235294e-02, 2.05936640e-02, 3.23635544e-02],\n",
              "       [6.09243697e-02, 1.44991468e-02, 3.34912043e-02],\n",
              "       [7.14285714e-02, 2.81798869e-02, 3.32938656e-02],\n",
              "       [7.14285714e-02, 2.81798869e-02, 1.66751240e-02],\n",
              "       [7.56302521e-02, 2.76284782e-02, 1.42083897e-02],\n",
              "       [7.98319328e-02, 2.10115738e-02, 4.87708615e-02],\n",
              "       [8.40336134e-02, 4.07229839e-02, 3.12077131e-02],\n",
              "       [9.66386555e-02, 3.18424016e-02, 2.93470907e-02],\n",
              "       [1.23949580e-01, 6.64244338e-02, 1.43718990e-01],\n",
              "       [1.38655462e-01, 6.98721893e-02, 1.17219215e-01]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "er2KCapCoypt"
      },
      "source": [
        "from sklearn.model_selection import train_test_split"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mJQKVtYLo3LS"
      },
      "source": [
        "X_train, X_test, y_train,y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "R3cIW_GHpwvf"
      },
      "source": [
        "from sklearn.neighbors import KNeighborsRegressor"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-uh7xTZxp7Z-"
      },
      "source": [
        "model = KNeighborsRegressor()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Yt8cRa2mqfah",
        "outputId": "47fdbb25-36c4-479e-ad5d-d24336517d1e"
      },
      "source": [
        "model.fit(X_train, y_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',\n",
              "                    metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n",
              "                    weights='uniform')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x0CgTWRyqiwE",
        "outputId": "e8c9ef55-2c23-4c46-cfac-61394466b2b2"
      },
      "source": [
        "model.score(X_train, y_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9825004826545278"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oXQC0HAZrUP_",
        "outputId": "f97ff12f-ec90-40d3-9989-b857cb4611fe"
      },
      "source": [
        "model.score(X_test, y_test)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9627485525701447"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "r982Jn9vrjEs"
      },
      "source": [
        "y_pred = model.predict(X_test)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jkuTAQPrr3AB"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ovBMlqifsAJd"
      },
      "source": [
        "Valores preditos,valores originais e erro"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 322
        },
        "id": "i57QZSuUsCv9",
        "outputId": "1f6a6a4d-387a-4585-db99-c83aa3ae0826"
      },
      "source": [
        "comp = pd.DataFrame({'Preditos':y_pred, 'Reais':y_test, 'Erro':y_pred-y_test}, )"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "Exception",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mException\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-57-838df199f6ef>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mcomp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m'Preditos'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Reais'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Erro'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0my_pred\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, index, columns, dtype, copy)\u001b[0m\n\u001b[1;32m    466\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    467\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 468\u001b[0;31m             \u001b[0mmgr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minit_dict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    469\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mMaskedArray\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    470\u001b[0m             \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmrecords\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mmrecords\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36minit_dict\u001b[0;34m(data, index, columns, dtype)\u001b[0m\n\u001b[1;32m    281\u001b[0m             \u001b[0marr\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mis_datetime64tz_dtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0marr\u001b[0m \u001b[0;32min\u001b[0m \u001b[0marrays\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    282\u001b[0m         ]\n\u001b[0;32m--> 283\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0marrays_to_mgr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrays\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata_names\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    284\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    285\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36marrays_to_mgr\u001b[0;34m(arrays, arr_names, index, columns, dtype, verify_integrity)\u001b[0m\n\u001b[1;32m     81\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     82\u001b[0m         \u001b[0;31m# don't force copy because getting jammed in an ndarray anyway\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 83\u001b[0;31m         \u001b[0marrays\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_homogenize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrays\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     84\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     85\u001b[0m         \u001b[0mcolumns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mensure_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36m_homogenize\u001b[0;34m(data, index, dtype)\u001b[0m\n\u001b[1;32m    350\u001b[0m                 \u001b[0mval\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfast_multiget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mval\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_values\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdefault\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnan\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    351\u001b[0m             val = sanitize_array(\n\u001b[0;32m--> 352\u001b[0;31m                 \u001b[0mval\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mraise_cast_failure\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    353\u001b[0m             )\n\u001b[1;32m    354\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/construction.py\u001b[0m in \u001b[0;36msanitize_array\u001b[0;34m(data, index, dtype, copy, raise_cast_failure)\u001b[0m\n\u001b[1;32m    494\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0msubarr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    495\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 496\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Data must be 1-dimensional\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    497\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    498\u001b[0m             \u001b[0msubarr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray_tuplesafe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mException\u001b[0m: Data must be 1-dimensional"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lfNq277ksjpC"
      },
      "source": [
        "from sklearn.metrics import mean_squared_error,mean_absolute_error"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "48Necozbt777",
        "outputId": "a898ac0f-f4d9-448b-be3c-6f281db281e4"
      },
      "source": [
        "print('MSE=', mean_squared_error(y_pred,y_test))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "MSE= 4163.269703225807\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xqOxg0WhuCNw",
        "outputId": "99558b2d-7b3d-4dad-ccd1-96a5faa853c2"
      },
      "source": [
        "print('MAE=',mean_absolute_error(y_pred,y_test))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "MAE= 42.814193548387095\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 644
        },
        "id": "E5T9MKW-uQ-d",
        "outputId": "642858fd-5220-48c2-d0b0-9ea6859cc258"
      },
      "source": [
        "fig, ax = plt.subplots(figsize=(16,9))\n",
        "\n",
        "eixoX = np.arange(31)\n",
        "\n",
        "ax.plot(eixoX, y_pred, label='Modelo')\n",
        "ax.plot(eixoX, y_test, label='Teste')\n",
        "\n",
        "plt.legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1152x648 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "k6Mme9DpvVdl"
      },
      "source": [
        "from sklearn.model_selection import GridSearchCV"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iFt8c_0-yCts",
        "outputId": "3b210ef8-e742-42bc-f732-20707ca3c598"
      },
      "source": [
        "k_values = np.arange(1,50)\n",
        "\n",
        "hp = {'n_neighbors': k_values}\n",
        "\n",
        "grid = GridSearchCV(model, param_grid=hp,cv=5)\n",
        "grid.fit(X_train, y_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=5, error_score=nan,\n",
              "             estimator=KNeighborsRegressor(algorithm='auto', leaf_size=30,\n",
              "                                           metric='minkowski',\n",
              "                                           metric_params=None, n_jobs=None,\n",
              "                                           n_neighbors=5, p=2,\n",
              "                                           weights='uniform'),\n",
              "             iid='deprecated', n_jobs=None,\n",
              "             param_grid={'n_neighbors': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n",
              "       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\n",
              "       35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49])},\n",
              "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
              "             scoring=None, verbose=0)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ed1RjX94zGc4",
        "outputId": "9a9bf0ee-097c-445a-ff48-32f8c0f1ca9c"
      },
      "source": [
        "grid.best_estimator_"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',\n",
              "                    metric_params=None, n_jobs=None, n_neighbors=3, p=2,\n",
              "                    weights='uniform')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 68
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eA0HWcRZzeGF"
      },
      "source": [
        "tuned_model = grid.best_estimator_"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Qwi12bUu0u8W"
      },
      "source": [
        "y_pred = tuned_model.predict(X_test)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jkjqVvsw00Mc",
        "outputId": "bddb7f99-b3ce-4259-f740-8708f2a4b621"
      },
      "source": [
        "mean_squared_error(y_pred,y_test)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2192.091935483871"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 71
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BYfCMRkD04Na",
        "outputId": "969387fa-02dd-428d-9fd2-c012301ea3ae"
      },
      "source": [
        "mean_absolute_error(y_pred,y_test)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "32.805376344086014"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "G-1ASmjZ1Fqi",
        "outputId": "d39ff40c-286c-418c-db0e-e44bb41f285d"
      },
      "source": [
        "tuned_model.score(X_test,y_test)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9803859458269504"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dNuY9HQL1Mn8"
      },
      "source": [
        "from joblib import dump"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VHi7cYox2BQ0",
        "outputId": "29c39505-05cb-4d89-83a2-fdb8f6c3b8f5"
      },
      "source": [
        "dump(model, 'Minha_IA_regressao.joblib')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Minha_IA_regressao.joblib']"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 171
        },
        "id": "TP8yBJ732HMg",
        "outputId": "ae279298-6ac4-4b33-85b7-6c90c045690d"
      },
      "source": [
        "loaded_model.predict()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-76-9406760c9a7d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mloaded_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'loaded_model' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dA_Ta_Ki2pl9"
      },
      "source": [
        "novo = np.array([[25.6, 11.7,4.7]])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "d0yhUBdq24uW"
      },
      "source": [
        "novo_scaled = scaler.transform(novo)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0B1hxAw63Hzt",
        "outputId": "caebd666-cffe-468a-909f-3b3ed9ab0f0c"
      },
      "source": [
        "model.predict(novo_scaled)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[307.]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 86
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vbh5J_Uz32ed"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}