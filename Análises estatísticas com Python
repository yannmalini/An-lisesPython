{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Aula_05.ipynb",
      "provenance": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyM2U3R9d2IDv9A9CAFtCehy",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/yannmalini/Python/blob/main/An%C3%A1lises%20estat%C3%ADsticas%20com%20Python\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SkzhKBUxFGQ8"
      },
      "source": [
        "# Análises Estatísticas\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "y-ufRJOtFMdp"
      },
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from pathlib import Path"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hn7fEZvEMinM"
      },
      "source": [
        "arquivo = Path().cwd().joinpath('Experimento.xlsx')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 824
        },
        "id": "lGOjqE1lM58n",
        "outputId": "090cc047-7fe3-4142-bbe6-c5a439012579"
      },
      "source": [
        "dados =  pd.read_excel(str(arquivo))\n",
        "dados"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Dieta</th>\n",
              "      <th>Repetição</th>\n",
              "      <th>Ganho de peso (g)</th>\n",
              "      <th>Temperatura (°C)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>573.894122</td>\n",
              "      <td>25.432418</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>425.849963</td>\n",
              "      <td>25.676273</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>664.400209</td>\n",
              "      <td>26.079955</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>1840.961499</td>\n",
              "      <td>27.776376</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>1210.270773</td>\n",
              "      <td>28.243019</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1397.175764</td>\n",
              "      <td>28.876681</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>831.709630</td>\n",
              "      <td>28.277457</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>1069.383821</td>\n",
              "      <td>28.749353</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>264.485060</td>\n",
              "      <td>24.947620</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>1007.076086</td>\n",
              "      <td>28.313167</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2117.994620</td>\n",
              "      <td>31.404407</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>639.877395</td>\n",
              "      <td>28.898926</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>1295.192738</td>\n",
              "      <td>28.652111</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>960.082651</td>\n",
              "      <td>27.984561</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>750.021146</td>\n",
              "      <td>27.315089</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1605.648771</td>\n",
              "      <td>29.480823</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>1776.456860</td>\n",
              "      <td>29.283492</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>2143.892943</td>\n",
              "      <td>31.102997</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>2059.686940</td>\n",
              "      <td>31.963428</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>1482.366622</td>\n",
              "      <td>30.009709</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>1393.195100</td>\n",
              "      <td>27.219915</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>586.200607</td>\n",
              "      <td>26.039085</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>466.880561</td>\n",
              "      <td>25.169809</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>521.809700</td>\n",
              "      <td>26.893507</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>1032.167736</td>\n",
              "      <td>27.845462</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    Dieta  Repetição  Ganho de peso (g)  Temperatura (°C)\n",
              "0       1          1         573.894122         25.432418\n",
              "1       1          2         425.849963         25.676273\n",
              "2       1          3         664.400209         26.079955\n",
              "3       1          4        1840.961499         27.776376\n",
              "4       1          5        1210.270773         28.243019\n",
              "5       2          1        1397.175764         28.876681\n",
              "6       2          2         831.709630         28.277457\n",
              "7       2          3        1069.383821         28.749353\n",
              "8       2          4         264.485060         24.947620\n",
              "9       2          5        1007.076086         28.313167\n",
              "10      3          1        2117.994620         31.404407\n",
              "11      3          2         639.877395         28.898926\n",
              "12      3          3        1295.192738         28.652111\n",
              "13      3          4         960.082651         27.984561\n",
              "14      3          5         750.021146         27.315089\n",
              "15      4          1        1605.648771         29.480823\n",
              "16      4          2        1776.456860         29.283492\n",
              "17      4          3        2143.892943         31.102997\n",
              "18      4          4        2059.686940         31.963428\n",
              "19      4          5        1482.366622         30.009709\n",
              "20      5          1        1393.195100         27.219915\n",
              "21      5          2         586.200607         26.039085\n",
              "22      5          3         466.880561         25.169809\n",
              "23      5          4         521.809700         26.893507\n",
              "24      5          5        1032.167736         27.845462"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "wCKgPDpnNOAi",
        "outputId": "7c29ba26-9b5a-4d14-cce9-770eaf702a48"
      },
      "source": [
        "dados.describe()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Dieta</th>\n",
              "      <th>Repetição</th>\n",
              "      <th>Ganho de peso (g)</th>\n",
              "      <th>Temperatura (°C)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>25.000000</td>\n",
              "      <td>25.000000</td>\n",
              "      <td>25.000000</td>\n",
              "      <td>25.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>3.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1124.667253</td>\n",
              "      <td>28.065426</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>1.443376</td>\n",
              "      <td>1.443376</td>\n",
              "      <td>567.267289</td>\n",
              "      <td>1.900921</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>264.485060</td>\n",
              "      <td>24.947620</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>639.877395</td>\n",
              "      <td>26.893507</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>3.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1032.167736</td>\n",
              "      <td>28.243019</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>4.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>1482.366622</td>\n",
              "      <td>28.898926</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>5.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>2143.892943</td>\n",
              "      <td>31.963428</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "           Dieta  Repetição  Ganho de peso (g)  Temperatura (°C)\n",
              "count  25.000000  25.000000          25.000000         25.000000\n",
              "mean    3.000000   3.000000        1124.667253         28.065426\n",
              "std     1.443376   1.443376         567.267289          1.900921\n",
              "min     1.000000   1.000000         264.485060         24.947620\n",
              "25%     2.000000   2.000000         639.877395         26.893507\n",
              "50%     3.000000   3.000000        1032.167736         28.243019\n",
              "75%     4.000000   4.000000        1482.366622         28.898926\n",
              "max     5.000000   5.000000        2143.892943         31.963428"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 391
        },
        "id": "_5eSkvUlO_RL",
        "outputId": "7ed5ee48-0d26-4170-96c2-14379965e850"
      },
      "source": [
        "dados.boxplot(figsize=(8,6))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fcdaaca3190>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 576x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GuC5XIesPUts"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BvQaisaKQFZd"
      },
      "source": [
        "#Analisando por Dieta"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "Y7SEh6oKQHIc",
        "outputId": "fe0db73b-3efc-487d-8b99-d8024e9a0908"
      },
      "source": [
        "dados_medios = dados.groupby(by='Dieta' , as_index=False).mean()\n",
        "dados_medios"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Dieta</th>\n",
              "      <th>Repetição</th>\n",
              "      <th>Ganho de peso (g)</th>\n",
              "      <th>Temperatura (°C)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>943.075313</td>\n",
              "      <td>26.641608</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>913.966072</td>\n",
              "      <td>27.832856</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>1152.633710</td>\n",
              "      <td>28.851019</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>1813.610427</td>\n",
              "      <td>30.368090</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>800.050741</td>\n",
              "      <td>26.633556</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Dieta  Repetição  Ganho de peso (g)  Temperatura (°C)\n",
              "0      1          3         943.075313         26.641608\n",
              "1      2          3         913.966072         27.832856\n",
              "2      3          3        1152.633710         28.851019\n",
              "3      4          3        1813.610427         30.368090\n",
              "4      5          3         800.050741         26.633556"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 441
        },
        "id": "yxQGbaWoQV77",
        "outputId": "a2905e3d-1eb5-4f4a-942b-3e7582a4bed3"
      },
      "source": [
        "fig, eixo = plt.subplots(figsize=(8,6))\n",
        "dados.boxplot (column='Ganho de peso (g)', by='Dieta', ax=eixo,  grid=False)\n",
        "fig.suptitle(None)\n",
        "eixo.set_title(None)\n",
        "\n",
        "eixo.set_ylabel('Ganho de peso(g)')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 576x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "66fyqb4jR3YJ",
        "outputId": "c36b8b9a-16a1-43ef-8f80-fffbc77d4a73"
      },
      "source": [
        "import plotly.express as  px\n",
        "\n",
        "fig = px.box(dados,  x='Dieta', y='Ganho de peso (g)')\n",
        "fig.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>\n",
              "            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>\n",
              "                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script src=\"https://cdn.plot.ly/plotly-latest.min.js\"></script>    \n",
              "            <div id=\"ecbbe0ac-e6bc-420f-adce-a0c08135a7e6\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>\n",
              "            <script type=\"text/javascript\">\n",
              "                \n",
              "                    window.PLOTLYENV=window.PLOTLYENV || {};\n",
              "                    \n",
              "                if (document.getElementById(\"ecbbe0ac-e6bc-420f-adce-a0c08135a7e6\")) {\n",
              "                    Plotly.newPlot(\n",
              "                        'ecbbe0ac-e6bc-420f-adce-a0c08135a7e6',\n",
              "                        [{\"alignmentgroup\": \"True\", \"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"Dieta=%{x}<br>Ganho de peso (g)=%{y}\", \"legendgroup\": \"\", \"marker\": {\"color\": \"#636efa\"}, \"name\": \"\", \"notched\": false, \"offsetgroup\": \"\", \"orientation\": \"v\", \"showlegend\": false, \"type\": \"box\", \"x\": [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5], \"x0\": \" \", \"xaxis\": \"x\", \"y\": [573.8941222866509, 425.849962633034, 664.4002085478979, 1840.9614989398801, 1210.27077296296, 1397.17576393261, 831.7096295122569, 1069.38382090972, 264.48506023012396, 1007.0760863959199, 2117.99461950455, 639.877395331803, 1295.19273846652, 960.0826514885221, 750.021146470691, 1605.64877061902, 1776.45686012993, 2143.89294314845, 2059.68694025636, 1482.36662166769, 1393.1951003816, 586.200607147161, 466.880561405272, 521.809699559495, 1032.1677359064], \"y0\": \" \", \"yaxis\": \"y\"}],\n",
              "                        {\"boxmode\": \"group\", \"legend\": {\"tracegroupgap\": 0}, \"margin\": {\"t\": 60}, \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"xaxis\": {\"anchor\": \"y\", \"domain\": [0.0, 1.0], \"title\": {\"text\": \"Dieta\"}}, \"yaxis\": {\"anchor\": \"x\", \"domain\": [0.0, 1.0], \"title\": {\"text\": \"Ganho de peso (g)\"}}},\n",
              "                        {\"responsive\": true}\n",
              "                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('ecbbe0ac-e6bc-420f-adce-a0c08135a7e6');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })\n",
              "                };\n",
              "                \n",
              "            </script>\n",
              "        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "7UO8qpy0UpMk",
        "outputId": "040ad71b-2ff2-4919-87a3-eb5c2b3d31d6"
      },
      "source": [
        "fig.write_html('Gráfico boxplot interativo.html')\n",
        "fig.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>\n",
              "            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>\n",
              "                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script src=\"https://cdn.plot.ly/plotly-latest.min.js\"></script>    \n",
              "            <div id=\"fc131fa3-2d70-4366-bea0-87ec184b8a5e\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>\n",
              "            <script type=\"text/javascript\">\n",
              "                \n",
              "                    window.PLOTLYENV=window.PLOTLYENV || {};\n",
              "                    \n",
              "                if (document.getElementById(\"fc131fa3-2d70-4366-bea0-87ec184b8a5e\")) {\n",
              "                    Plotly.newPlot(\n",
              "                        'fc131fa3-2d70-4366-bea0-87ec184b8a5e',\n",
              "                        [{\"alignmentgroup\": \"True\", \"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"Dieta=%{x}<br>Ganho de peso (g)=%{y}\", \"legendgroup\": \"\", \"marker\": {\"color\": \"#636efa\"}, \"name\": \"\", \"notched\": false, \"offsetgroup\": \"\", \"orientation\": \"v\", \"showlegend\": false, \"type\": \"box\", \"x\": [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5], \"x0\": \" \", \"xaxis\": \"x\", \"y\": [573.8941222866509, 425.849962633034, 664.4002085478979, 1840.9614989398801, 1210.27077296296, 1397.17576393261, 831.7096295122569, 1069.38382090972, 264.48506023012396, 1007.0760863959199, 2117.99461950455, 639.877395331803, 1295.19273846652, 960.0826514885221, 750.021146470691, 1605.64877061902, 1776.45686012993, 2143.89294314845, 2059.68694025636, 1482.36662166769, 1393.1951003816, 586.200607147161, 466.880561405272, 521.809699559495, 1032.1677359064], \"y0\": \" \", \"yaxis\": \"y\"}],\n",
              "                        {\"boxmode\": \"group\", \"legend\": {\"tracegroupgap\": 0}, \"margin\": {\"t\": 60}, \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"xaxis\": {\"anchor\": \"y\", \"domain\": [0.0, 1.0], \"title\": {\"text\": \"Dieta\"}}, \"yaxis\": {\"anchor\": \"x\", \"domain\": [0.0, 1.0], \"title\": {\"text\": \"Ganho de peso (g)\"}}},\n",
              "                        {\"responsive\": true}\n",
              "                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('fc131fa3-2d70-4366-bea0-87ec184b8a5e');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })\n",
              "                };\n",
              "                \n",
              "            </script>\n",
              "        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RWYGjQifWwVH"
      },
      "source": [
        "# Identificando diferenças entre os grupos com ANOVA"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "giTYMpP5YuFh",
        "outputId": "979d39a2-2111-4b0b-989e-cdf061a158ad"
      },
      "source": [
        "!pip install pingouin"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting pingouin\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/5c/40/7736d4fcb8dbb6758a1e9ca51754e60ff4efe5d7c9b5bb6166cff538513d/pingouin-0.3.11.tar.gz (204kB)\n",
            "\r\u001b[K     |█▋                              | 10kB 16.4MB/s eta 0:00:01\r\u001b[K     |███▏                            | 20kB 23.9MB/s eta 0:00:01\r\u001b[K     |████▉                           | 30kB 16.7MB/s eta 0:00:01\r\u001b[K     |██████▍                         | 40kB 18.5MB/s eta 0:00:01\r\u001b[K     |████████                        | 51kB 12.5MB/s eta 0:00:01\r\u001b[K     |█████████▋                      | 61kB 14.0MB/s eta 0:00:01\r\u001b[K     |███████████▏                    | 71kB 12.6MB/s eta 0:00:01\r\u001b[K     |████████████▉                   | 81kB 12.1MB/s eta 0:00:01\r\u001b[K     |██████████████▍                 | 92kB 11.6MB/s eta 0:00:01\r\u001b[K     |████████████████                | 102kB 11.4MB/s eta 0:00:01\r\u001b[K     |█████████████████▋              | 112kB 11.4MB/s eta 0:00:01\r\u001b[K     |███████████████████▎            | 122kB 11.4MB/s eta 0:00:01\r\u001b[K     |████████████████████▉           | 133kB 11.4MB/s eta 0:00:01\r\u001b[K     |██████████████████████▍         | 143kB 11.4MB/s eta 0:00:01\r\u001b[K     |████████████████████████        | 153kB 11.4MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▋      | 163kB 11.4MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▎    | 174kB 11.4MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▉   | 184kB 11.4MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▌ | 194kB 11.4MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 204kB 11.4MB/s \n",
            "\u001b[?25hRequirement already satisfied: numpy>=1.15 in /usr/local/lib/python3.7/dist-packages (from pingouin) (1.19.5)\n",
            "Requirement already satisfied: scipy>=1.3 in /usr/local/lib/python3.7/dist-packages (from pingouin) (1.4.1)\n",
            "Requirement already satisfied: pandas>=0.24 in /usr/local/lib/python3.7/dist-packages (from pingouin) (1.1.5)\n",
            "Requirement already satisfied: matplotlib>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from pingouin) (3.2.2)\n",
            "Requirement already satisfied: seaborn>=0.9.0 in /usr/local/lib/python3.7/dist-packages (from pingouin) (0.11.1)\n",
            "Requirement already satisfied: statsmodels>=0.10.0 in /usr/local/lib/python3.7/dist-packages (from pingouin) (0.10.2)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (from pingouin) (0.22.2.post1)\n",
            "Collecting pandas_flavor>=0.1.2\n",
            "  Downloading https://files.pythonhosted.org/packages/9a/57/7fbcff4c0961ed190ac5fcb0bd8194152ee1ee6487edf64fdbae16e2bc4b/pandas_flavor-0.2.0-py2.py3-none-any.whl\n",
            "Collecting outdated\n",
            "  Downloading https://files.pythonhosted.org/packages/fd/f6/95588d496e518355c33b389222c99069b1c6f2c046be64f400072fdc7cda/outdated-0.2.1-py3-none-any.whl\n",
            "Requirement already satisfied: tabulate in /usr/local/lib/python3.7/dist-packages (from pingouin) (0.8.9)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24->pingouin) (2.8.1)\n",
            "Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24->pingouin) (2018.9)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=3.0.2->pingouin) (0.10.0)\n",
            "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=3.0.2->pingouin) (2.4.7)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=3.0.2->pingouin) (1.3.1)\n",
            "Requirement already satisfied: patsy>=0.4.0 in /usr/local/lib/python3.7/dist-packages (from statsmodels>=0.10.0->pingouin) (0.5.1)\n",
            "Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->pingouin) (1.0.1)\n",
            "Requirement already satisfied: xarray in /usr/local/lib/python3.7/dist-packages (from pandas_flavor>=0.1.2->pingouin) (0.15.1)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from outdated->pingouin) (2.23.0)\n",
            "Collecting littleutils\n",
            "  Downloading https://files.pythonhosted.org/packages/4e/b1/bb4e06f010947d67349f863b6a2ad71577f85590180a935f60543f622652/littleutils-0.2.2.tar.gz\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas>=0.24->pingouin) (1.15.0)\n",
            "Requirement already satisfied: setuptools>=41.2 in /usr/local/lib/python3.7/dist-packages (from xarray->pandas_flavor>=0.1.2->pingouin) (56.0.0)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->outdated->pingouin) (2.10)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->outdated->pingouin) (3.0.4)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->outdated->pingouin) (2020.12.5)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->outdated->pingouin) (1.24.3)\n",
            "Building wheels for collected packages: pingouin, littleutils\n",
            "  Building wheel for pingouin (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for pingouin: filename=pingouin-0.3.11-cp37-none-any.whl size=203325 sha256=9ddb46a54fb87f067651f5254c814b5502aa6c32540bb4c1def76270a25bb88e\n",
            "  Stored in directory: /root/.cache/pip/wheels/79/46/ef/e377eb45c86f278f660d31c4a30e3f733063d28c89462f1aea\n",
            "  Building wheel for littleutils (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for littleutils: filename=littleutils-0.2.2-cp37-none-any.whl size=7051 sha256=0b8c8ac657a58c78ec4c20e086e09d69bd760dcb31e099d1bb68bc8d2cca0850\n",
            "  Stored in directory: /root/.cache/pip/wheels/53/16/9f/ac67d15c40243754fd73f620e1b9b6dedc20492ecc19a2bae1\n",
            "Successfully built pingouin littleutils\n",
            "Installing collected packages: pandas-flavor, littleutils, outdated, pingouin\n",
            "Successfully installed littleutils-0.2.2 outdated-0.2.1 pandas-flavor-0.2.0 pingouin-0.3.11\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rBnRF56BYj68"
      },
      "source": [
        "import pingouin as  pg\n",
        "import scipy.stats as  sp"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Zfxl1y4CW-wh"
      },
      "source": [
        "##  Pressupostos"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pOE1mT_TXFvk"
      },
      "source": [
        "###Normalidade"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "77n8DpuJYgr0",
        "outputId": "c30b5384-33ec-4833-da9d-cb9da55ad4f8"
      },
      "source": [
        "pg.normality(dados['Ganho de peso (g)'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>W</th>\n",
              "      <th>pval</th>\n",
              "      <th>normal</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Ganho de peso (g)</th>\n",
              "      <td>0.943851</td>\n",
              "      <td>0.181596</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                          W      pval  normal\n",
              "Ganho de peso (g)  0.943851  0.181596    True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-c-d1_FnYiGc"
      },
      "source": [
        "###Homogeneidade das variancias"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "EAx4Q75IYine",
        "outputId": "bd416598-873e-46a4-c4c9-c82788553c79"
      },
      "source": [
        "pg.homoscedasticity(dados, dv='Ganho de peso (g)', group='Dieta')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>W</th>\n",
              "      <th>pval</th>\n",
              "      <th>equal_var</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>levene</th>\n",
              "      <td>0.269462</td>\n",
              "      <td>0.894142</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "               W      pval  equal_var\n",
              "levene  0.269462  0.894142       True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oKK50KOBafS-"
      },
      "source": [
        "##ANOVA"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 111
        },
        "id": "7jNwRho7ag8b",
        "outputId": "09a3e6e8-eda0-4c27-bd48-70fecc37d710"
      },
      "source": [
        "pg.anova(dv='Ganho de peso (g)', between='Dieta', data=dados, detailed=True)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Source</th>\n",
              "      <th>SS</th>\n",
              "      <th>DF</th>\n",
              "      <th>MS</th>\n",
              "      <th>F</th>\n",
              "      <th>p-unc</th>\n",
              "      <th>np2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Dieta</td>\n",
              "      <td>3.290857e+06</td>\n",
              "      <td>4</td>\n",
              "      <td>822714.150172</td>\n",
              "      <td>3.712479</td>\n",
              "      <td>0.020387</td>\n",
              "      <td>0.42611</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Within</td>\n",
              "      <td>4.432156e+06</td>\n",
              "      <td>20</td>\n",
              "      <td>221607.782011</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Source            SS  DF             MS         F     p-unc      np2\n",
              "0   Dieta  3.290857e+06   4  822714.150172  3.712479  0.020387  0.42611\n",
              "1  Within  4.432156e+06  20  221607.782011       NaN       NaN      NaN"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "twpVtmukbUy2"
      },
      "source": [
        "###Teste a posteriori"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 427
        },
        "id": "tVJvrZIjbXVc",
        "outputId": "d7e509e1-fc26-452a-f5a6-1a73b4371fa9"
      },
      "source": [
        "pg.pairwise_tukey(dv='Ganho de peso (g)',  between='Dieta', data=dados)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning:\n",
            "\n",
            "pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n",
            "\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>A</th>\n",
              "      <th>B</th>\n",
              "      <th>mean(A)</th>\n",
              "      <th>mean(B)</th>\n",
              "      <th>diff</th>\n",
              "      <th>se</th>\n",
              "      <th>T</th>\n",
              "      <th>p-tukey</th>\n",
              "      <th>hedges</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>943.075313</td>\n",
              "      <td>913.966072</td>\n",
              "      <td>29.109241</td>\n",
              "      <td>297.729933</td>\n",
              "      <td>0.097771</td>\n",
              "      <td>0.900000</td>\n",
              "      <td>0.055851</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>943.075313</td>\n",
              "      <td>1152.633710</td>\n",
              "      <td>-209.558397</td>\n",
              "      <td>297.729933</td>\n",
              "      <td>-0.703854</td>\n",
              "      <td>0.900000</td>\n",
              "      <td>-0.402077</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>943.075313</td>\n",
              "      <td>1813.610427</td>\n",
              "      <td>-870.535114</td>\n",
              "      <td>297.729933</td>\n",
              "      <td>-2.923909</td>\n",
              "      <td>0.057528</td>\n",
              "      <td>-1.670283</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>943.075313</td>\n",
              "      <td>800.050741</td>\n",
              "      <td>143.024572</td>\n",
              "      <td>297.729933</td>\n",
              "      <td>0.480384</td>\n",
              "      <td>0.900000</td>\n",
              "      <td>0.274419</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>913.966072</td>\n",
              "      <td>1152.633710</td>\n",
              "      <td>-238.667638</td>\n",
              "      <td>297.729933</td>\n",
              "      <td>-0.801625</td>\n",
              "      <td>0.900000</td>\n",
              "      <td>-0.457928</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>913.966072</td>\n",
              "      <td>1813.610427</td>\n",
              "      <td>-899.644355</td>\n",
              "      <td>297.729933</td>\n",
              "      <td>-3.021679</td>\n",
              "      <td>0.047110</td>\n",
              "      <td>-1.726135</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>913.966072</td>\n",
              "      <td>800.050741</td>\n",
              "      <td>113.915331</td>\n",
              "      <td>297.729933</td>\n",
              "      <td>0.382613</td>\n",
              "      <td>0.900000</td>\n",
              "      <td>0.218568</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>1152.633710</td>\n",
              "      <td>1813.610427</td>\n",
              "      <td>-660.976717</td>\n",
              "      <td>297.729933</td>\n",
              "      <td>-2.220055</td>\n",
              "      <td>0.212892</td>\n",
              "      <td>-1.268207</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>1152.633710</td>\n",
              "      <td>800.050741</td>\n",
              "      <td>352.582969</td>\n",
              "      <td>297.729933</td>\n",
              "      <td>1.184238</td>\n",
              "      <td>0.736911</td>\n",
              "      <td>0.676496</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>1813.610427</td>\n",
              "      <td>800.050741</td>\n",
              "      <td>1013.559686</td>\n",
              "      <td>297.729933</td>\n",
              "      <td>3.404292</td>\n",
              "      <td>0.021001</td>\n",
              "      <td>1.944702</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   A  B      mean(A)      mean(B)  ...          se         T   p-tukey    hedges\n",
              "0  1  2   943.075313   913.966072  ...  297.729933  0.097771  0.900000  0.055851\n",
              "1  1  3   943.075313  1152.633710  ...  297.729933 -0.703854  0.900000 -0.402077\n",
              "2  1  4   943.075313  1813.610427  ...  297.729933 -2.923909  0.057528 -1.670283\n",
              "3  1  5   943.075313   800.050741  ...  297.729933  0.480384  0.900000  0.274419\n",
              "4  2  3   913.966072  1152.633710  ...  297.729933 -0.801625  0.900000 -0.457928\n",
              "5  2  4   913.966072  1813.610427  ...  297.729933 -3.021679  0.047110 -1.726135\n",
              "6  2  5   913.966072   800.050741  ...  297.729933  0.382613  0.900000  0.218568\n",
              "7  3  4  1152.633710  1813.610427  ...  297.729933 -2.220055  0.212892 -1.268207\n",
              "8  3  5  1152.633710   800.050741  ...  297.729933  1.184238  0.736911  0.676496\n",
              "9  4  5  1813.610427   800.050741  ...  297.729933  3.404292  0.021001  1.944702\n",
              "\n",
              "[10 rows x 9 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4oejRwkfc8SI"
      },
      "source": [
        "###Correlação"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 824
        },
        "id": "axcnXVUAc-Qx",
        "outputId": "a2a28fe6-5ea6-4fa6-e261-d5c5d37ebae6"
      },
      "source": [
        "dados\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Dieta</th>\n",
              "      <th>Repetição</th>\n",
              "      <th>Ganho de peso (g)</th>\n",
              "      <th>Temperatura (°C)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>573.894122</td>\n",
              "      <td>25.432418</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>425.849963</td>\n",
              "      <td>25.676273</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>664.400209</td>\n",
              "      <td>26.079955</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>1840.961499</td>\n",
              "      <td>27.776376</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>1210.270773</td>\n",
              "      <td>28.243019</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1397.175764</td>\n",
              "      <td>28.876681</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>831.709630</td>\n",
              "      <td>28.277457</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>1069.383821</td>\n",
              "      <td>28.749353</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>264.485060</td>\n",
              "      <td>24.947620</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>1007.076086</td>\n",
              "      <td>28.313167</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2117.994620</td>\n",
              "      <td>31.404407</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>639.877395</td>\n",
              "      <td>28.898926</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>1295.192738</td>\n",
              "      <td>28.652111</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>960.082651</td>\n",
              "      <td>27.984561</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>750.021146</td>\n",
              "      <td>27.315089</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1605.648771</td>\n",
              "      <td>29.480823</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>1776.456860</td>\n",
              "      <td>29.283492</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>2143.892943</td>\n",
              "      <td>31.102997</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>2059.686940</td>\n",
              "      <td>31.963428</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>1482.366622</td>\n",
              "      <td>30.009709</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>1393.195100</td>\n",
              "      <td>27.219915</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>586.200607</td>\n",
              "      <td>26.039085</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>466.880561</td>\n",
              "      <td>25.169809</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>521.809700</td>\n",
              "      <td>26.893507</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>1032.167736</td>\n",
              "      <td>27.845462</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    Dieta  Repetição  Ganho de peso (g)  Temperatura (°C)\n",
              "0       1          1         573.894122         25.432418\n",
              "1       1          2         425.849963         25.676273\n",
              "2       1          3         664.400209         26.079955\n",
              "3       1          4        1840.961499         27.776376\n",
              "4       1          5        1210.270773         28.243019\n",
              "5       2          1        1397.175764         28.876681\n",
              "6       2          2         831.709630         28.277457\n",
              "7       2          3        1069.383821         28.749353\n",
              "8       2          4         264.485060         24.947620\n",
              "9       2          5        1007.076086         28.313167\n",
              "10      3          1        2117.994620         31.404407\n",
              "11      3          2         639.877395         28.898926\n",
              "12      3          3        1295.192738         28.652111\n",
              "13      3          4         960.082651         27.984561\n",
              "14      3          5         750.021146         27.315089\n",
              "15      4          1        1605.648771         29.480823\n",
              "16      4          2        1776.456860         29.283492\n",
              "17      4          3        2143.892943         31.102997\n",
              "18      4          4        2059.686940         31.963428\n",
              "19      4          5        1482.366622         30.009709\n",
              "20      5          1        1393.195100         27.219915\n",
              "21      5          2         586.200607         26.039085\n",
              "22      5          3         466.880561         25.169809\n",
              "23      5          4         521.809700         26.893507\n",
              "24      5          5        1032.167736         27.845462"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "Q12dtutudYer",
        "outputId": "4e589e06-c27f-486d-9016-596186e932ac"
      },
      "source": [
        "dados.plot.scatter(x='Temperatura (°C)', y='Ganho de peso (g)')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fcd8f5f8110>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 173
        },
        "id": "f4VpKaC1dq-K",
        "outputId": "edf2e575-923a-4de2-a25d-c6c4ac72e8b9"
      },
      "source": [
        "dados.corr(method='pearson')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Dieta</th>\n",
              "      <th>Repetição</th>\n",
              "      <th>Ganho de peso (g)</th>\n",
              "      <th>Temperatura (°C)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Dieta</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.156125</td>\n",
              "      <td>0.191278</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Repetição</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.092876</td>\n",
              "      <td>0.000223</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Ganho de peso (g)</th>\n",
              "      <td>0.156125</td>\n",
              "      <td>-0.092876</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.862801</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Temperatura (°C)</th>\n",
              "      <td>0.191278</td>\n",
              "      <td>0.000223</td>\n",
              "      <td>0.862801</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                      Dieta  Repetição  Ganho de peso (g)  Temperatura (°C)\n",
              "Dieta              1.000000   0.000000           0.156125          0.191278\n",
              "Repetição          0.000000   1.000000          -0.092876          0.000223\n",
              "Ganho de peso (g)  0.156125  -0.092876           1.000000          0.862801\n",
              "Temperatura (°C)   0.191278   0.000223           0.862801          1.000000"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "zZYgMK1DeQYT",
        "outputId": "a190d14b-589a-431a-ed77-8e4069b00a08"
      },
      "source": [
        "fig = px.scatter(dados, x='Temperatura (°C)', y='Ganho de peso (g)')\n",
        "fig.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>\n",
              "            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>\n",
              "                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script src=\"https://cdn.plot.ly/plotly-latest.min.js\"></script>    \n",
              "            <div id=\"6ca3362a-85bb-4166-a055-0c1878119c21\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>\n",
              "            <script type=\"text/javascript\">\n",
              "                \n",
              "                    window.PLOTLYENV=window.PLOTLYENV || {};\n",
              "                    \n",
              "                if (document.getElementById(\"6ca3362a-85bb-4166-a055-0c1878119c21\")) {\n",
              "                    Plotly.newPlot(\n",
              "                        '6ca3362a-85bb-4166-a055-0c1878119c21',\n",
              "                        [{\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"Temperatura (\\u00b0C)=%{x}<br>Ganho de peso (g)=%{y}\", \"legendgroup\": \"\", \"marker\": {\"color\": \"#636efa\", \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"\", \"showlegend\": false, \"type\": \"scatter\", \"x\": [25.4324177985231, 25.6762725765241, 26.0799553487822, 27.776376413543, 28.2430191059797, 28.876681316586527, 28.277457363567066, 28.74935270415123, 24.9476198805252, 28.31316661569903, 31.4044074096737, 28.898925502271823, 28.6521108116266, 27.9845612947757, 27.3150886424422, 29.4808228618842, 29.2834916125441, 31.1029974665041, 31.96342827564265, 30.009708883711003, 27.219915425972975, 26.0390847707349, 25.169809459322, 26.8935065683413, 27.84546248654158], \"xaxis\": \"x\", \"y\": [573.8941222866509, 425.849962633034, 664.4002085478979, 1840.9614989398801, 1210.27077296296, 1397.17576393261, 831.7096295122569, 1069.38382090972, 264.48506023012396, 1007.0760863959199, 2117.99461950455, 639.877395331803, 1295.19273846652, 960.0826514885221, 750.021146470691, 1605.64877061902, 1776.45686012993, 2143.89294314845, 2059.68694025636, 1482.36662166769, 1393.1951003816, 586.200607147161, 466.880561405272, 521.809699559495, 1032.1677359064], \"yaxis\": \"y\"}],\n",
              "                        {\"legend\": {\"tracegroupgap\": 0}, \"margin\": {\"t\": 60}, \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"xaxis\": {\"anchor\": \"y\", \"domain\": [0.0, 1.0], \"title\": {\"text\": \"Temperatura (\\u00b0C)\"}}, \"yaxis\": {\"anchor\": \"x\", \"domain\": [0.0, 1.0], \"title\": {\"text\": \"Ganho de peso (g)\"}}},\n",
              "                        {\"responsive\": true}\n",
              "                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('6ca3362a-85bb-4166-a055-0c1878119c21');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })\n",
              "                };\n",
              "                \n",
              "            </script>\n",
              "        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dXgN7O3WgNNQ"
      },
      "source": [
        "#Análise de Regressão Linear"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zrKNQLCZiRYe"
      },
      "source": [
        "import scipy.stats as stats"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rQcZuH3Vgemt"
      },
      "source": [
        "# Y - variavel dependente\n",
        "# X - variavel independente\n",
        "\n",
        "reg  = stats.linregress(dados['Temperatura (°C)'], dados['Ganho de peso (g)'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sgnPYz1iiECe",
        "outputId": "583af38a-e101-4282-ad26-231670a62d79"
      },
      "source": [
        "reg.pvalue"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2.8913186692266107e-08"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n_7_QgQBiXis",
        "outputId": "0c344741-45ee-4c9b-ead5-002ea542937a"
      },
      "source": [
        "#o r vai de 0 a 1. perto de zero quer dizer que o efeito é baixo, quanto mais próximo de 1 o efeito é forte\n",
        "reg.rvalue**2"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.744426231981499"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 441
        },
        "id": "qMeaMW1bilsW",
        "outputId": "ad7fa6b8-6a01-4aa6-8106-e58c53d5e947"
      },
      "source": [
        "fig, eixo =  plt.subplots(figsize=(8,6))\n",
        "dados.plot.scatter(x='Temperatura (°C)',  y='Ganho de peso (g)', ax=eixo)\n",
        "# Y = a  +  bX\n",
        "#Ganho de  peso  =b* temperatura  +  a\n",
        "x = dados['Temperatura (°C)'] \n",
        "y = reg.slope*x + reg.intercept\n",
        "eixo.plot(x, y,  color='red')\n",
        "\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 576x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "l9L7NPvajfYH"
      },
      "source": [
        "# PREDIÇÃO\n",
        "def predict(temp):\n",
        "  ganho_pred = reg.slope*temp + reg.intercept\n",
        "\n",
        "  return ganho_pred"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wmCLGHfEmPb4",
        "outputId": "163693ad-f039-4741-ef22-9f59e7585edf"
      },
      "source": [
        "predict(25.3)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "412.6402335443163"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "dN_aRN9qme5m",
        "outputId": "a2dde9cb-1442-4df3-87a5-a114d2a56a30"
      },
      "source": [
        "fig = px.scatter(dados,  x='Temperatura (°C)', y='Ganho de peso (g)', trendline='ols')\n",
        "fig.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>\n",
              "            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>\n",
              "                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script src=\"https://cdn.plot.ly/plotly-latest.min.js\"></script>    \n",
              "            <div id=\"95ecf7b6-5c1e-4766-b2c3-d42c66054887\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>\n",
              "            <script type=\"text/javascript\">\n",
              "                \n",
              "                    window.PLOTLYENV=window.PLOTLYENV || {};\n",
              "                    \n",
              "                if (document.getElementById(\"95ecf7b6-5c1e-4766-b2c3-d42c66054887\")) {\n",
              "                    Plotly.newPlot(\n",
              "                        '95ecf7b6-5c1e-4766-b2c3-d42c66054887',\n",
              "                        [{\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"Temperatura (\\u00b0C)=%{x}<br>Ganho de peso (g)=%{y}\", \"legendgroup\": \"\", \"marker\": {\"color\": \"#636efa\", \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"\", \"showlegend\": false, \"type\": \"scatter\", \"x\": [25.4324177985231, 25.6762725765241, 26.0799553487822, 27.776376413543, 28.2430191059797, 28.876681316586527, 28.277457363567066, 28.74935270415123, 24.9476198805252, 28.31316661569903, 31.4044074096737, 28.898925502271823, 28.6521108116266, 27.9845612947757, 27.3150886424422, 29.4808228618842, 29.2834916125441, 31.1029974665041, 31.96342827564265, 30.009708883711003, 27.219915425972975, 26.0390847707349, 25.169809459322, 26.8935065683413, 27.84546248654158], \"xaxis\": \"x\", \"y\": [573.8941222866509, 425.849962633034, 664.4002085478979, 1840.9614989398801, 1210.27077296296, 1397.17576393261, 831.7096295122569, 1069.38382090972, 264.48506023012396, 1007.0760863959199, 2117.99461950455, 639.877395331803, 1295.19273846652, 960.0826514885221, 750.021146470691, 1605.64877061902, 1776.45686012993, 2143.89294314845, 2059.68694025636, 1482.36662166769, 1393.1951003816, 586.200607147161, 466.880561405272, 521.809699559495, 1032.1677359064], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"<b>OLS trendline</b><br>Ganho de peso (g) = 257.474659 * Temperatura (\\u00b0C) + -6101.468636<br>R<sup>2</sup>=0.744426<br><br>Temperatura (\\u00b0C)=%{x}<br>Ganho de peso (g)=%{y} <b>(trend)</b>\", \"legendgroup\": \"\", \"marker\": {\"color\": \"#636efa\", \"symbol\": \"circle\"}, \"mode\": \"lines\", \"name\": \"\", \"showlegend\": false, \"type\": \"scatter\", \"x\": [24.9476198805252, 25.169809459322, 25.4324177985231, 25.6762725765241, 26.0390847707349, 26.0799553487822, 26.8935065683413, 27.219915425972975, 27.3150886424422, 27.776376413543, 27.84546248654158, 27.9845612947757, 28.2430191059797, 28.277457363567066, 28.31316661569903, 28.6521108116266, 28.74935270415123, 28.876681316586527, 28.898925502271823, 29.2834916125441, 29.4808228618842, 30.009708883711003, 31.1029974665041, 31.4044074096737, 31.96342827564265], \"xaxis\": \"x\", \"y\": [321.91128248463883, 379.1194684931761, 446.7344610493701, 509.5208868326863, 602.9358327764785, 613.4589709176453, 822.927793659207, 906.9698029350075, 931.4744943804217, 1050.244405892483, 1068.0323189715054, 1103.846737172913, 1170.3930739488605, 1179.2600525737662, 1188.454280085487, 1275.723821313033, 1300.7611444201575, 1333.545035473252, 1339.2723495947512, 1438.2883776558874, 1489.096173767106, 1625.2709218260761, 1906.7650267437375, 1984.3704490459158, 2128.3041558209416], \"yaxis\": \"y\"}],\n",
              "                        {\"legend\": {\"tracegroupgap\": 0}, \"margin\": {\"t\": 60}, \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"xaxis\": {\"anchor\": \"y\", \"domain\": [0.0, 1.0], \"title\": {\"text\": \"Temperatura (\\u00b0C)\"}}, \"yaxis\": {\"anchor\": \"x\", \"domain\": [0.0, 1.0], \"title\": {\"text\": \"Ganho de peso (g)\"}}},\n",
              "                        {\"responsive\": true}\n",
              "                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('95ecf7b6-5c1e-4766-b2c3-d42c66054887');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })\n",
              "                };\n",
              "                \n",
              "            </script>\n",
              "        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Vav4M2CPnt9g"
      },
      "source": [
        "fig.write_html('regressão.html')"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}